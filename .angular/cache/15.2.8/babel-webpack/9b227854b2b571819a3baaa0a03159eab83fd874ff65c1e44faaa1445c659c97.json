{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet NewpostComponent = class NewpostComponent {\n  constructor(uploadPostService, router) {\n    this.uploadPostService = uploadPostService;\n    this.router = router;\n    this.caption = '';\n  }\n  handleFileInput(event) {\n    const file = event.target.files[0];\n    const allowedTypes = ['image/jpeg', 'image/png'];\n    if (file && allowedTypes.includes(file.type)) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const filePreview = document.getElementById('filePreview');\n        filePreview.innerHTML = `<img src=\"${e.target.result}\"  alt=\"File Preview\" class=\"preview-image\" style=\"width: 50%; height:50%; aspect-ratio: 1; object-fit:cover; padding-top:20%; padding-bottom:20%; \">`;\n        // \n      };\n\n      const error = document.getElementById('error');\n      const fileInput = document.getElementById('input');\n      fileInput.remove;\n      reader.readAsDataURL(file);\n      error.innerHTML = '';\n      console.log('Selected image file:', file);\n    } else {\n      let error = document.getElementById('error');\n      error.innerHTML = 'Please select images only';\n      console.log('Please select a valid image file.');\n    }\n  }\n  submit(postForm) {\n    console.log(postForm.value);\n    this.uploadPostService.uploadPost(postForm.value).subscribe(res => {\n      let errorMessage = document.getElementById('error');\n      if (res.statusCode == 204) {\n        localStorage.setItem('sessionUser', postForm.value.username);\n        this.router.navigateByUrl('/user/feed');\n      } else {\n        errorMessage.innerHTML = res.msg;\n      }\n    });\n  }\n};\nNewpostComponent = __decorate([Component({\n  selector: 'app-newpost',\n  templateUrl: './newpost.component.html',\n  styleUrls: ['./newpost.component.css']\n})], NewpostComponent);\nexport { NewpostComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAG3BC,YAAoBC,iBAAmC,EAASC,MAAa;IAAzD,sBAAiB,GAAjBD,iBAAiB;IAA2B,WAAM,GAANC,MAAM;IAGtE,YAAO,GAAW,EAAE;EAH4D;EAKhFC,eAAe,CAACC,KAAU;IACxB,MAAMC,IAAI,GAASD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACxC,MAAMC,YAAY,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC;IAGhD,IAAIH,IAAI,IAAIG,YAAY,CAACC,QAAQ,CAACJ,IAAI,CAACK,IAAI,CAAC,EAAE;MAC5C,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAM,IAAI;QACzB,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAgB;QACzEF,WAAW,CAACG,SAAS,GAAG,aAAaJ,CAAC,CAACR,MAAM,CAACa,MAAM,uJAAuJ;QAC3M;MACF,CAAC;;MACD,MAAMC,KAAK,GAAGJ,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAqB;MAClE,MAAMI,SAAS,GAAGL,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAqB;MACtEI,SAAS,CAACC,MAAM;MAMhBX,MAAM,CAACY,aAAa,CAAClB,IAAI,CAAC;MAG1Be,KAAK,CAACF,SAAS,GAAG,EAAE;MACpBM,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEpB,IAAI,CAAC;KAC1C,MAAM;MACL,IAAIe,KAAK,GAAGJ,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAqB;MAChEG,KAAK,CAACF,SAAS,GAAG,2BAA2B;MAC7CM,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;;EAGpD;EAGAC,MAAM,CAACC,QAAiB;IACtBH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAACC,KAAK,CAAC;IAC3B,IAAI,CAAC3B,iBAAiB,CAAC4B,UAAU,CAACF,QAAQ,CAACC,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAwC,IAAI;MACvG,IAAIC,YAAY,GAAGhB,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAgB;MAGlE,IAAIc,GAAG,CAACE,UAAU,IAAI,GAAG,EAAE;QACzBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAER,QAAQ,CAACC,KAAK,CAACQ,QAAQ,CAAC;QAC5D,IAAI,CAAClC,MAAM,CAACmC,aAAa,CAAC,YAAY,CAAC;OACxC,MACG;QACFL,YAAY,CAACd,SAAS,GAAGa,GAAG,CAACO,GAAG;;IAGpC,CAAC,CAAC;EAEJ;CAGD;AA7DYvC,gBAAgB,eAL5BD,SAAS,CAAC;EACTyC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACW1C,gBAAgB,CA6D5B;SA7DYA,gBAAgB","names":["Component","NewpostComponent","constructor","uploadPostService","router","handleFileInput","event","file","target","files","allowedTypes","includes","type","reader","FileReader","onload","e","filePreview","document","getElementById","innerHTML","result","error","fileInput","remove","readAsDataURL","console","log","submit","postForm","value","uploadPost","subscribe","res","errorMessage","statusCode","localStorage","setItem","username","navigateByUrl","msg","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\angular_project\\devClone\\src\\app\\user\\components\\pages\\newpost\\newpost.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { UploadpostService } from 'src/app/user/services/uploadpost.service';\n@Component({\n  selector: 'app-newpost',\n  templateUrl: './newpost.component.html',\n  styleUrls: ['./newpost.component.css']\n})\nexport class NewpostComponent {\n\n\n  constructor(private uploadPostService:UploadpostService,private router:Router){ }\n\n\n  caption: string = '';\n\n  handleFileInput(event: any) {\n    const file: File = event.target.files[0];\n    const allowedTypes = ['image/jpeg', 'image/png'];\n\n\n    if (file && allowedTypes.includes(file.type)) {\n      const reader = new FileReader();\n      reader.onload = (e: any) => {\n        const filePreview = document.getElementById('filePreview') as HTMLElement;\n        filePreview.innerHTML = `<img src=\"${e.target.result}\"  alt=\"File Preview\" class=\"preview-image\" style=\"width: 50%; height:50%; aspect-ratio: 1; object-fit:cover; padding-top:20%; padding-bottom:20%; \">`\n        // \n      };\n      const error = document.getElementById('error') as HTMLInputElement\n      const fileInput = document.getElementById('input') as HTMLInputElement\n      fileInput.remove\n\n      \n\n      \n\n      reader.readAsDataURL(file);\n\n\n      error.innerHTML = ''\n      console.log('Selected image file:', file);\n    } else {\n      let error = document.getElementById('error') as HTMLInputElement\n      error.innerHTML = 'Please select images only' \n      console.log('Please select a valid image file.');\n    }\n\n  }\n\n  \n  submit(postForm : NgForm){\n    console.log(postForm.value)\n    this.uploadPostService.uploadPost(postForm.value).subscribe((res: { statusCode: Number, msg: string }) => {\n      let errorMessage = document.getElementById('error') as HTMLElement;\n      \n\n      if (res.statusCode == 204) {\n        localStorage.setItem('sessionUser', postForm.value.username)\n        this.router.navigateByUrl('/user/feed')\n      }\n      else{\n        errorMessage.innerHTML = res.msg\n      }\n\n    })\n\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}